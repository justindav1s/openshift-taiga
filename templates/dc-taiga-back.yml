---
kind: Template
apiVersion: v1
metadata:
  name: "${NAME}-deployment"
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    generation: 1
    labels:
      app: "${NAME}"
      template: "${NAME}-deployment"
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      activeDeadlineSeconds: 21600
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGESTREAM_NAMESPACE}"
          name: "${IMAGESTREAM_NAME}:${IMAGESTREAM_TAG}"
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        volumes:
        - name: "${NAME}"
          persistentVolumeClaim:
            claimName: "${NAME}"
        containers:
        - name: "${NAME}"
          ports:
          - containerPort: 8080
            protocol: TCP
          env:
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_ENGINE
            value: postgresql
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: "postgresql"
                key: database-name
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: "postgresql"
                key: database-user
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "postgresql"
                key: database-password
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: django-secret-key
          - name: WEB_CONCURRENCY
            value: '4'
          - name: TAIGA_FROM_EMAIL_ADDRESS
            value: "${FROM_EMAIL}"
          - name: TAIGA_EMAIL_HOST
            value: "${EMAIL_HOST}"
          - name: GITHUB_API_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: github-api-client-secret
          - name: PUBLIC_REGISTER_ENABLED
            value: "${PUBLIC_REGISTER_ENABLED}"
          - name: TAIGA_MEDIA_URL
            value: "${TAIGA_FRONT_SCHEME}://${TAIGA_FRONT_DOMAIN}/media/"
          - name: TAIGA_STATIC_URL
            value: "${TAIGA_FRONT_SCHEME}://${TAIGA_FRONT_DOMAIN}/static/"
          - name: TAIGA_FRONT_SCHEME
            value: "${TAIGA_FRONT_SCHEME}"
          - name: TAIGA_FRONT_DOMAIN
            value: "${TAIGA_FRONT_DOMAIN}"
          - name: TAIGA_BACK_DOMAIN
            value: "${TAIGA_BACK_DOMAIN}"
          - name: DJANGO_SETTINGS_MODULE
            value: settings.local
          resources:
            limits:
              cpu: '2'
              memory: 4Gi
            requests:
              cpu: '2'
              memory: 4Gi
          volumeMounts:
          - name: "${NAME}"
            mountPath: "/opt/app-root/src/media"
            subPath: media
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
    labels:
      app: "${NAME}"
      template: "${NAME}-deployment"
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${POSTGRES_SERVICE_NAME}",
        "kind": "Service"}]'
  spec:
    ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      name: "${NAME}"
      app: "${NAME}"
    name: "${NAME}"
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    port:
      targetPort: 8080
    to:
      kind: Service
      name: "${NAME}"
      weight: 100
    wildcardPolicy: None
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${NAME}"
    labels:
      app: "${NAME}"
      template: "${NAME}-deployment"
  stringData:
    django-secret-key: "${DJANGO_SECRET_KEY}"
    github-api-client-secret: "${GITHUB_API_CLIENT_SECRET}"
  type: Opaque
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${STORAGE_SIZE}"
  status: {}
parameters:
- name: NAME
  required: true
  value: taiga-back
- name: IMAGESTREAM_NAME
  required: true
  value: taiga-back
- name: IMAGESTREAM_NAMESPACE
  required: true
  value: openshift
- name: IMAGESTREAM_TAG
  required: true
  value: latest
- name: POSTGRES_SERVICE_NAME
  required: true
  value: postgres
- name: FROM_EMAIL
  required: true
  value: "taiga@example.com"
- name: EMAIL_HOST
  required: true
  value: smtp.example.com
- name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- name: DATABASE_NAME
  required: true
  value: taiga
- name: DATABASE_USER
  value: taiga
  required: true
- name: DJANGO_SECRET_KEY
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: TAIGA_FRONT_SCHEME
  required: true
  value: "https"
- name: TAIGA_BACK_SCHEME
  required: true
  value: "https"  
- name: TAIGA_FRONT_DOMAIN
  required: true
- name: TAIGA_BACK_DOMAIN
  required: true
- name: STORAGE_SIZE
  required: true
  value: 1Gi
- name: PUBLIC_REGISTER_ENABLED
  required: true
  value: "false"
